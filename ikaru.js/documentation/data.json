{
    "project": {
        "name": "Ikaru.js API",
        "description": "Lightweight and Powerfull library to DOM Manipulation & events and more!!",
        "version": "0.0.4",
        "url": "https://github.com/rsurjano/ikaru.js"
    },
    "files": {
        "ikaru.js": {
            "name": "ikaru.js",
            "modules": {
                "ikaru.js": 1
            },
            "classes": {
                "LIST": 1,
                "DOM": 1,
                "COORDINATES": 1,
                "TRANSVERSAL": 1,
                "CSS": 1,
                "HTML": 1,
                "EVENTS": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "ikaru.js": {
            "name": "ikaru.js",
            "submodules": {},
            "classes": {
                "LIST": 1,
                "DOM": 1,
                "COORDINATES": 1,
                "TRANSVERSAL": 1,
                "CSS": 1,
                "HTML": 1,
                "EVENTS": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "ikaru.js",
            "line": 1143,
            "description": "ikaru.js is a lightweiht & Faster DOM manipulation cross Browser"
        }
    },
    "classes": {
        "LIST": {
            "name": "LIST",
            "shortname": "LIST",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ikaru.js",
            "namespace": "",
            "file": "ikaru.js",
            "line": 232,
            "description": "List Functions"
        },
        "DOM": {
            "name": "DOM",
            "shortname": "DOM",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ikaru.js",
            "namespace": "",
            "file": "ikaru.js",
            "line": 296,
            "description": "DOM MANIPULATION"
        },
        "COORDINATES": {
            "name": "COORDINATES",
            "shortname": "COORDINATES",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ikaru.js",
            "namespace": "",
            "file": "ikaru.js",
            "line": 577,
            "description": "COORDINATES"
        },
        "TRANSVERSAL": {
            "name": "TRANSVERSAL",
            "shortname": "TRANSVERSAL",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ikaru.js",
            "namespace": "",
            "file": "ikaru.js",
            "line": 636,
            "description": "TRANSVERSAL DOM"
        },
        "CSS": {
            "name": "CSS",
            "shortname": "CSS",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ikaru.js",
            "namespace": "",
            "file": "ikaru.js",
            "line": 771,
            "description": "CSS MANIPULATION"
        },
        "HTML": {
            "name": "HTML",
            "shortname": "HTML",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ikaru.js",
            "namespace": "",
            "file": "ikaru.js",
            "line": 948,
            "description": "HTML MANIPULATION"
        },
        "EVENTS": {
            "name": "EVENTS",
            "shortname": "EVENTS",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ikaru.js",
            "namespace": "",
            "file": "ikaru.js",
            "line": 1143,
            "description": "MAIN EVENTS"
        }
    },
    "classitems": [
        {
            "file": "ikaru.js",
            "line": 238,
            "description": "Implement forEach function",
            "itemtype": "method",
            "name": "forEach",
            "return": {
                "description": "TRUE if succeed | THROW if error",
                "type": "Boolean"
            },
            "class": "LIST",
            "module": "ikaru.js"
        },
        {
            "file": "ikaru.js",
            "line": 247,
            "description": "Check if element has a property",
            "itemtype": "method",
            "name": "has",
            "params": [
                {
                    "name": "Void",
                    "description": "Must be Array or Object",
                    "type": "Mixed"
                },
                {
                    "name": "String",
                    "description": "String to find",
                    "type": "String"
                }
            ],
            "return": {
                "description": "True or False",
                "type": "Boolean"
            },
            "class": "LIST",
            "module": "ikaru.js"
        },
        {
            "file": "ikaru.js",
            "line": 257,
            "description": "See type element",
            "itemtype": "method",
            "name": "is",
            "params": [
                {
                    "name": "Ctor",
                    "description": "Must be: String, Object, Number",
                    "type": "String"
                },
                {
                    "name": "val",
                    "description": "The Element to compare",
                    "type": "Void"
                }
            ],
            "return": {
                "description": "True or False",
                "type": "Boolean"
            },
            "class": "LIST",
            "module": "ikaru.js"
        },
        {
            "file": "ikaru.js",
            "line": 269,
            "description": "Verify if Element is empty",
            "itemtype": "method",
            "name": "isEmpty",
            "params": [
                {
                    "name": "object",
                    "description": "Must be: String, Object, Number",
                    "type": "Mixin"
                }
            ],
            "return": {
                "description": "True if empty, False if not",
                "type": "Boolean"
            },
            "class": "LIST",
            "module": "ikaru.js"
        },
        {
            "file": "ikaru.js",
            "line": 284,
            "description": "Checks if given parameter is a DOMNode Object",
            "itemtype": "method",
            "name": "isDom",
            "params": [
                {
                    "name": "Object",
                    "description": "Must be a HTML Element, false if another is provided",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "True if is DOMNode, False if not",
                "type": "Boolean"
            },
            "class": "LIST",
            "module": "ikaru.js"
        },
        {
            "file": "ikaru.js",
            "line": 302,
            "description": "Create new HTML element with specific tag",
            "itemtype": "method",
            "name": "domNode",
            "params": [
                {
                    "name": "tag",
                    "description": "Provide a string to construct a DOM node",
                    "type": "String"
                }
            ],
            "return": {
                "description": "new HTML Element",
                "type": "DOM Object"
            },
            "class": "DOM",
            "module": "ikaru.js"
        },
        {
            "file": "ikaru.js",
            "line": 316,
            "description": "Polyfill window.requestAnimationFrame",
            "itemtype": "method",
            "name": "requestAnimationFrame",
            "return": {
                "description": "crossbrowser requestAnimationFrame",
                "type": "Object"
            },
            "class": "DOM",
            "module": "ikaru.js"
        },
        {
            "file": "ikaru.js",
            "line": 327,
            "description": "Polyfill window.cancelAnimationFrame",
            "itemtype": "method",
            "name": "cancelAnimationFrame",
            "return": {
                "description": "crossbrowser cancelAnimationFrame",
                "type": "Object"
            },
            "class": "DOM",
            "module": "ikaru.js"
        },
        {
            "file": "ikaru.js",
            "line": 338,
            "description": "Normalized Event object",
            "itemtype": "method",
            "name": "Event",
            "params": [
                {
                    "name": "e",
                    "description": "Event Oject",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Event binded",
                "type": "Object"
            },
            "class": "DOM",
            "module": "ikaru.js"
        },
        {
            "file": "ikaru.js",
            "line": 394,
            "description": "Attaches javascript listener to DOM Object",
            "itemtype": "method",
            "name": "addListener",
            "params": [
                {
                    "name": "event",
                    "description": "Listener name, must be one of them:\n* MOUSE EVENTS\nclick\ndblclick\ncontextmenu\nmousedown\nmouseenter\nmouseleave\nmousemove\nmouseover\nmouseout\nmouseup\nmousemove\n* TOUCH EVENTS\ntouchstart\ntouchend\ntouchmove\ntouchcancel\n* KEYBOARD EVENTS\nkeydown\nkeyup\nkeypress\n* FORM EVENTS\nselect\nreset\nfocus\nblur\nsubmit\nchange\n* FRAME/WINDOW EVENT\nload\nunload\nresize\nunload\nerror\nscroll\n* STANDARD DRAG AND DROP EVENTS\ndrag\ndragstart\ndragend\ndragenter\ndragleave\ndragover\ndrop\n* DOM DRAG AND DROP EVENTS\nonDomDragStart\nonDomDragEnd\nonDomDragMove\nonDomDrop\nonDomDragEnter\nonDomDragLeave",
                    "type": "String"
                },
                {
                    "name": "element",
                    "description": "HTML Element to attach listener",
                    "type": "Object"
                },
                {
                    "name": "listener",
                    "description": "function to execute",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "Function callback or false if don't attached",
                "type": "Boolean"
            },
            "class": "DOM",
            "module": "ikaru.js"
        },
        {
            "file": "ikaru.js",
            "line": 514,
            "description": "Determine if element has listener",
            "itemtype": "method",
            "name": "hasListener",
            "params": [
                {
                    "name": "element",
                    "description": "HTML element",
                    "type": "Object"
                },
                {
                    "name": "event",
                    "description": "Event name to find in element",
                    "type": "String"
                },
                {
                    "name": "listener",
                    "description": "function callback",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "True or False acording found listener or not",
                "type": "Boolean"
            },
            "class": "DOM",
            "module": "ikaru.js"
        },
        {
            "file": "ikaru.js",
            "line": 529,
            "description": "Find DOM element by CSS Selector",
            "itemtype": "method",
            "name": "find",
            "params": [
                {
                    "name": "selector",
                    "description": "CSS selector",
                    "type": "String"
                },
                {
                    "name": "element",
                    "description": "HTML Element}",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "HTML element",
                "type": "Object"
            },
            "class": "DOM",
            "module": "ikaru.js"
        },
        {
            "file": "ikaru.js",
            "line": 542,
            "description": "Return DOM element by ID",
            "itemtype": "method",
            "name": "id",
            "params": [
                {
                    "name": "id",
                    "description": "ID of element",
                    "type": "String"
                }
            ],
            "return": {
                "description": "HTML element",
                "type": "Object"
            },
            "class": "DOM",
            "module": "ikaru.js"
        },
        {
            "file": "ikaru.js",
            "line": 553,
            "description": "Return DOM element(s) by Tag",
            "itemtype": "method",
            "name": "tag",
            "params": [
                {
                    "name": "name",
                    "description": "Tag of element(s)",
                    "type": "String"
                }
            ],
            "return": {
                "description": "HTML element",
                "type": "Object"
            },
            "class": "DOM",
            "module": "ikaru.js"
        },
        {
            "file": "ikaru.js",
            "line": 564,
            "description": "Find elements by Class Name",
            "itemtype": "method",
            "name": "byClass",
            "params": [
                {
                    "name": "name",
                    "description": "Classname of element(s)",
                    "type": "String"
                }
            ],
            "return": {
                "description": "HTML element",
                "type": "Object"
            },
            "class": "DOM",
            "module": "ikaru.js"
        },
        {
            "file": "ikaru.js",
            "line": 584,
            "description": "Get Coordinates from element",
            "itemtype": "method",
            "name": "offset",
            "params": [
                {
                    "name": "element",
                    "description": "HTML Element",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Coordinates of HTML element",
                "type": "Object"
            },
            "class": "COORDINATES",
            "module": "ikaru.js"
        },
        {
            "file": "ikaru.js",
            "line": 613,
            "description": "get Width from element",
            "itemtype": "method",
            "name": "width",
            "params": [
                {
                    "name": "element",
                    "description": "HTML Element",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Width element",
                "type": "Int"
            },
            "class": "COORDINATES",
            "module": "ikaru.js"
        },
        {
            "file": "ikaru.js",
            "line": 624,
            "description": "get Height from element",
            "itemtype": "method",
            "name": "Height",
            "params": [
                {
                    "name": "element",
                    "description": "HTML Element",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "height element",
                "type": "Int"
            },
            "class": "COORDINATES",
            "module": "ikaru.js"
        },
        {
            "file": "ikaru.js",
            "line": 642,
            "description": "Get Parent from HTML Element",
            "itemtype": "method",
            "name": "parent",
            "params": [
                {
                    "name": "element",
                    "description": "HTML Element",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Parent HTML Element",
                "type": "Object"
            },
            "class": "TRANSVERSAL",
            "module": "ikaru.js"
        },
        {
            "file": "ikaru.js",
            "line": 654,
            "description": "Get Children elements from HTML Element",
            "itemtype": "method",
            "name": "children",
            "params": [
                {
                    "name": "element",
                    "description": "HTML Element",
                    "type": "Object"
                },
                {
                    "name": "tag",
                    "description": "If TRUE, get All Children elements, if String, filter by that string",
                    "type": "String/Boolean"
                }
            ],
            "return": {
                "description": "Children HTML Element",
                "type": "Object"
            },
            "class": "TRANSVERSAL",
            "module": "ikaru.js"
        },
        {
            "file": "ikaru.js",
            "line": 683,
            "description": "Get Next sibling from HTML element",
            "itemtype": "method",
            "name": "next",
            "params": [
                {
                    "name": "element",
                    "description": "HTML Element",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Next HTML Element",
                "type": "Object"
            },
            "class": "TRANSVERSAL",
            "module": "ikaru.js"
        },
        {
            "file": "ikaru.js",
            "line": 698,
            "description": "Get Previous sibling from HTML Element",
            "itemtype": "method",
            "name": "previous",
            "params": [
                {
                    "name": "element",
                    "description": "HTML Element",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Previous HTML Element",
                "type": "Object"
            },
            "class": "TRANSVERSAL",
            "module": "ikaru.js"
        },
        {
            "file": "ikaru.js",
            "line": 713,
            "description": "Get or Set element attributes",
            "itemtype": "method",
            "name": "attr",
            "params": [
                {
                    "name": "element",
                    "description": "HTML Element",
                    "type": "Object"
                },
                {
                    "name": "attribute",
                    "description": "Must be: Array, String, Object\n* I.attr(element, \"href\"); // returns href attribute's value of the element\n* I.attr(element, [\"href\", \"target\"]); //returns object of attributed of the element\n* I.attr(element, {href: \"#new\"}); //sets href attribute's value",
                    "type": "Mixed"
                }
            ],
            "class": "TRANSVERSAL",
            "module": "ikaru.js"
        },
        {
            "file": "ikaru.js",
            "line": 778,
            "description": "Set CSS Properties",
            "itemtype": "method",
            "name": "css",
            "params": [
                {
                    "name": "element",
                    "description": "HTML Element",
                    "type": "Object"
                },
                {
                    "name": "style",
                    "description": "json object with css style",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "HTML Element styled",
                "type": "Object"
            },
            "class": "CSS",
            "module": "ikaru.js"
        },
        {
            "file": "ikaru.js",
            "line": 820,
            "description": "Gets css classes",
            "itemtype": "method",
            "name": "classess",
            "params": [
                {
                    "name": "element",
                    "description": "HTML Element",
                    "type": "Object"
                },
                {
                    "name": "style",
                    "description": "json object with css style",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Classnames",
                "type": "Array"
            },
            "class": "CSS",
            "module": "ikaru.js"
        },
        {
            "file": "ikaru.js",
            "line": 842,
            "description": "Check if HTML Element has a Class",
            "itemtype": "method",
            "name": "hasClass",
            "params": [
                {
                    "name": "element",
                    "description": "HTML Element",
                    "type": "Object"
                },
                {
                    "name": "className",
                    "description": "json object with css style",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Classnames",
                "type": "Array"
            },
            "class": "CSS",
            "module": "ikaru.js"
        },
        {
            "file": "ikaru.js",
            "line": 871,
            "description": "Add Class to HTML object",
            "itemtype": "method",
            "name": "addClass",
            "params": [
                {
                    "name": "element",
                    "description": "HTML Element",
                    "type": "Object"
                },
                {
                    "name": "className",
                    "description": "string with className",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Classnames",
                "type": "Array"
            },
            "class": "CSS",
            "module": "ikaru.js"
        },
        {
            "file": "ikaru.js",
            "line": 909,
            "description": "Remove Class",
            "itemtype": "method",
            "name": "removeClass",
            "params": [
                {
                    "name": "element",
                    "description": "HTML Element",
                    "type": "Object"
                },
                {
                    "name": "className",
                    "description": "string with className",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Classnames",
                "type": "Array"
            },
            "class": "CSS",
            "module": "ikaru.js"
        },
        {
            "file": "ikaru.js",
            "line": 955,
            "description": "Set or Get HTML text from  HTML element",
            "itemtype": "method",
            "name": "html",
            "params": [
                {
                    "name": "element",
                    "description": "HTML content to insert in new element",
                    "type": "String"
                },
                {
                    "name": "string",
                    "description": "HTML content to insert in new element (optional)",
                    "type": "String"
                }
            ],
            "return": {
                "description": "String or HTML content from element",
                "type": "Object"
            },
            "class": "HTML",
            "module": "ikaru.js"
        },
        {
            "file": "ikaru.js",
            "line": 976,
            "description": "Create a div element with specific HTML content",
            "itemtype": "method",
            "name": "createHtml",
            "params": [
                {
                    "name": "html",
                    "description": "HTML content to insert in new element",
                    "type": "String"
                }
            ],
            "return": {
                "description": "New HTML ELement with specific html content",
                "type": "Object"
            },
            "class": "HTML",
            "module": "ikaru.js"
        },
        {
            "file": "ikaru.js",
            "line": 990,
            "description": "Create a DOMNode copy",
            "itemtype": "method",
            "name": "copy",
            "params": [
                {
                    "name": "element",
                    "description": "HTML element",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Cloned HTML ELement",
                "type": "Object"
            },
            "class": "HTML",
            "module": "ikaru.js"
        },
        {
            "file": "ikaru.js",
            "line": 1003,
            "description": "Set or get Text to HTML element",
            "itemtype": "method",
            "name": "text",
            "params": [
                {
                    "name": "element",
                    "description": "HTML element",
                    "type": "Object"
                },
                {
                    "name": "string",
                    "description": "Text to set in HTML Element (optional)",
                    "type": "String"
                }
            ],
            "optional": 1,
            "return": {
                "description": "Cloned HTML ELement",
                "type": "Object"
            },
            "class": "HTML",
            "module": "ikaru.js"
        },
        {
            "file": "ikaru.js",
            "line": 1031,
            "description": "Insert new HTML element to the END from HTML Element",
            "itemtype": "method",
            "name": "append",
            "params": [
                {
                    "name": "element",
                    "description": "HTML element",
                    "type": "Object"
                },
                {
                    "name": "html",
                    "description": "If Text, create new element, If HTML Element, append to element",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "HTML element appended",
                "type": "Object"
            },
            "class": "HTML",
            "module": "ikaru.js"
        },
        {
            "file": "ikaru.js",
            "line": 1050,
            "description": "Insert html content to the BEGIN from HTML Element",
            "itemtype": "method",
            "name": "prepend",
            "params": [
                {
                    "name": "element",
                    "description": "HTML element",
                    "type": "Object"
                },
                {
                    "name": "html",
                    "description": "If Text, create new element, If HTML Element, prepend to element",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "HTML element prepended",
                "type": "Object"
            },
            "class": "HTML",
            "module": "ikaru.js"
        },
        {
            "file": "ikaru.js",
            "line": 1069,
            "description": "Insert html content AFTER from HTML Element",
            "itemtype": "method",
            "name": "after",
            "params": [
                {
                    "name": "element",
                    "description": "HTML element",
                    "type": "Object"
                },
                {
                    "name": "html",
                    "description": "If Text, create new element, If HTML Element, insert after to element",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "HTML element",
                "type": "Object"
            },
            "class": "HTML",
            "module": "ikaru.js"
        },
        {
            "file": "ikaru.js",
            "line": 1090,
            "description": "Insert html content BEFORE from HTML Element",
            "itemtype": "method",
            "name": "after",
            "params": [
                {
                    "name": "element",
                    "description": "HTML element",
                    "type": "Object"
                },
                {
                    "name": "html",
                    "description": "If Text, create new element, If HTML Element, insert before to element",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "HTML element",
                "type": "Object"
            },
            "class": "HTML",
            "module": "ikaru.js"
        },
        {
            "file": "ikaru.js",
            "line": 1110,
            "description": "Replace HTML text or HTML Element on element",
            "itemtype": "method",
            "name": "replace",
            "params": [
                {
                    "name": "element",
                    "description": "HTML element",
                    "type": "Object"
                },
                {
                    "name": "html",
                    "description": "If Text, create new element, If HTML Element, replace child html with element",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "HTML element replaced",
                "type": "Object"
            },
            "class": "HTML",
            "module": "ikaru.js"
        },
        {
            "file": "ikaru.js",
            "line": 1129,
            "description": "Remove DOM element",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "element",
                    "description": "HTML element",
                    "type": "Object"
                }
            ],
            "class": "HTML",
            "module": "ikaru.js"
        },
        {
            "file": "ikaru.js",
            "line": 1151,
            "description": "Executed when PAGE is loaded",
            "itemtype": "method",
            "name": "loaded",
            "params": [
                {
                    "name": "handler",
                    "description": "function",
                    "type": "Function"
                }
            ],
            "class": "EVENTS",
            "module": "ikaru.js"
        }
    ],
    "warnings": []
}